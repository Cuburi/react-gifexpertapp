{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","category","type","value","onChange","target","getGifs","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAC5B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAWA,OACE,sBAAMC,SARa,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAeP,GAAf,mBAA8BO,OAC5CN,EAAc,MAIhB,SACE,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAZjB,SAACP,GACxBF,EAAcE,EAAEQ,OAAOF,a,+BCNdG,EAAO,uCAAG,WAAOL,GAAP,uBAAAM,EAAA,6DACbC,EADa,iDAEyBC,UAAUR,GAFnC,+DAGAS,MAAMF,GAHN,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATnB,kBAaZM,GAbY,4CAAH,sDCEPO,EAAc,SAAC,GAAqB,IAApBJ,EAAmB,EAAnBA,GAAIC,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAEnC,OADAc,QAAQC,IAAI,CAACN,KAAGC,QAAMV,QAElB,sBAAKgB,UAAU,6CAAf,UACG,qBAAKC,IAAKjB,EAAKkB,IAAMR,IACrB,kCAAKA,EAAL,WCHES,EAAU,SAAC,GAAkB,IAAhB1B,EAAe,EAAfA,SACxB,ECF0B,SAACA,GAC3B,MAA0BR,mBAAS,CACjCoB,KAAM,GACNe,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAaA,OATAC,qBAAU,WACRzB,EAAQL,GAAU+B,MAAK,SAAChB,GACtBc,EAAS,CACPjB,KAAMG,EACNY,SAAS,SAGZ,CAAC3B,IAEG4B,EDZuBI,CAAahC,GAA/BkB,EAAZ,EAAON,KAAYe,EAAnB,EAAmBA,QACnB,OACE,qCACE,6BAAK3B,IACJ2B,GAAW,2CACZ,qBAAKJ,UAAU,YAAf,SACGL,EAAOJ,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aERnBiB,EAAe,WAC1B,MAAoCzC,mBAAS,CAAC,iBAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KACA,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BACG2C,EAAWpB,KAAI,SAACd,GACf,OAAO,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MCR/BmC,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.ecb5494f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n  const [inputValue, setInputValue] = useState('');\r\n  const hundleInputValue = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n  const hundleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (inputValue.trim().length > 2) {\r\n      setCategories((category) => [inputValue, ...category]);\r\n      setInputValue(\"\");\r\n    }\r\n  };\r\n  return (\r\n    <form onSubmit={hundleSubmit}>\r\n      <input type=\"text\" value={inputValue} onChange={hundleInputValue} />\r\n    </form>\r\n  );\r\n};\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired,\r\n}\r\n","export const getGifs = async (category) => {\r\n    const url =\r\n      `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=ZRk3klRl0LDdjD996DpXHr2iGhviZsoJ`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n    const gifs = data.map((img) => {\r\n      return {\r\n        id: img.id,\r\n        title: img.title,\r\n        url: img.images?.downsized_medium.url,\r\n      };\r\n    });\r\n    \r\n    return gifs;\r\n  };","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title,url}) => {\r\n    console.log({id,title,url})\r\n    return (\r\n        <div className=\"card animate__animated animate__backInDown\">\r\n           <img src={url} alt={ title } />\r\n           <p> {title} </p>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport { GifGridItem } from \"./GifGridItem\"; \r\n\r\nexport const GifGrid = ({ category }) => {\r\n  const {data:images,loading} = useFetchGifs(category)\r\n  return (\r\n    <>\r\n      <h3>{category}</h3>\r\n      {loading && <p>Loading...</p> }\r\n      <div className=\"card-grid\">\r\n        {images.map((img) => (\r\n          <GifGridItem key={img.id} {...img} />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n  useEffect(() => {\r\n    getGifs(category).then((img) => {\r\n      setState({\r\n        data: img,\r\n        loading: false,\r\n      });\r\n    });\r\n  }, [category]);\r\n\r\n  return state;\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\n\r\nexport const GifExpertApp = () => {\r\n  const [categories, setCategories] = useState([\"Harry Potter\"]);\r\n  return (\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n      <AddCategory setCategories={setCategories} />\r\n      <hr />\r\n      <ol>\r\n        {categories.map((category) => {\r\n          return <GifGrid key={category} category={category} />;\r\n        })}\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { GifExpertApp } from \"./GifExpertApp\";\nimport \"./index.css\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n"],"sourceRoot":""}